# docker-compose.yml
# This Docker Compose file orchestrates the multi-container application environment.
# It defines three core services: a PostgreSQL database, a Go backend, and a React frontend.
# The configuration emphasizes network isolation, persistent data storage via volumes,
# and environment variable management for seamless inter-service communication.


services:
  # PostgreSQL Database Service
  # Provides a persistent, transactional data store for the application.
  db:
    image: postgres:14-alpine
    container_name: tictactoe_db
    env_file:
      - ./backend/.env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/migrations:/docker-entrypoint-initdb.d # Executes initial schema on startup
    networks:
      - tictactoe_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d tictactoeDB"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Go Backend Service
  # The core API and WebSocket server handling all business logic.
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: tictactoe_backend
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - ./backend/.env
    networks:
      - tictactoe_network

  # React Frontend Service
  # Serves the static UI assets built with Vite.
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: tictactoe_frontend
    ports:
      - "5173:80" # Nginx serves on port 80 inside the container
    depends_on:
      - backend
    env_file:
      - ./frontend/.env
    networks:
      - tictactoe_network

# Named volume for persistent PostgreSQL data
volumes:
  postgres_data:
    driver: local

# Bridge network for isolated communication between services
networks:
  tictactoe_network:
    driver: bridge

